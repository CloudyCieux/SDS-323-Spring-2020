# Cleaning the data
sm = filter(sm, spam == 0 & adult <= 5)
sm = select(sm, -c(X, chatter, uncategorized, spam, adult))
# First let's look at the correlations in the data set
# Obvious correlations that stick out are:
# college uni and sports playing/online games
# fashion and beauty
# personal fitness and health nutrition
corr_mat = cor(sm)
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mosaic)
library(foreach)
library(gamlr)
library(LICORS)
library(cluster)
library(corrplot)
library(factoextra)
library(gridExtra)
set.seed(7)
gb = read.csv("greenbuildings.csv")
summary(gb)
# Remove extraneous and redundant varaibles, as well as NA entries
gb = select(gb, - c(CS_PropertyID, LEED, Energystar, cd_total_07, hd_total07))
gb = na.omit(gb)
# Treat cluster like a factor though they are numbered
gb$cluster = as.factor(gb$cluster)
# Rent is positively skewed, so we should regress on the log of it
qplot(log(Rent), data = gb) +
labs(title = "Plot of log(Rent)",
caption = "Figure 1: Histogram of the rent of 7,894 commercial rental properties
on the log scale to normalize the otherwise positively skewed data.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# Incredibly basic model and results
lm = lm(log(Rent) ~ green_rating, data = gb)
# coef(lm)
# Now to choose other main effects
# Lots of cluster level differences in rent
clust_samples = sample(levels(gb$cluster), 10)
p1 = ggplot(filter(gb, cluster %in% clust_samples)) +
geom_boxplot(mapping = aes(x = cluster, y = log(Rent))) +
labs(title = "Plot of Clusters on log(Rent)",
x = "Cluster",
caption = "Figure 2: Above is a grouped boxplot showing cluster level
differences in rent of 10 different clusters sampled from the data. A
cluster consists of a green building and other buildings surrounding it
within a quarter-mile radius. Below are 4 other plots showing the effects
of other features on rent. For the categorical features, 0 = No 1 = Yes.") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5),
axis.text.y = element_text(size = 4))
p1
# age and rent
p2 = qplot(age, log(Rent), data = gb, geom = "point") +
labs(title = "Plot of Age on log(Rent)",
x = "Age") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# renovated and rent
p3 = qplot(factor(renovated), log(Rent), data = gb, geom = "boxplot") +
labs(title = "Renovation Status on log(Rent)",
x = "Renovation Status") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# class_a and rent
p4 = qplot(factor(class_a), log(Rent), data = gb, geom = "boxplot") +
labs(title = "Class A Status on log(Rent)",
x = "Class A Status") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# net and rent
p5 = qplot(factor(net), log(Rent), data = gb, geom = "boxplot") +
labs(title = "Included Utilities on log(Rent)",
x = "Included Utilities") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
grid.arrange(p2, p3, p4, p5, ncol = 2)
# Now run a lasso regression over all the effects
x_gb = sparse.model.matrix(~ green_rating + age + renovated + class_a +
+ net + cluster + class_b + amenities + size +
empl_gr + leasing_rate + stories + amenities +
total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + cluster_rent + cluster:age +
cluster:renovated + cluster:class_a + cluster:net,
data = gb)[, -1]
y_gb = log(gb$Rent)
lasso1 = cv.gamlr(x_gb, y_gb, free = 1:5)
# plot(lasso1)
# Coefficients of main effects
head(coef(lasso1))
# Number of coefficients in the model that are nonzero
colSums(coef(lasso1) == 0)
set.seed(3)
wine = read.csv("wine.csv")
summary(wine)
corr_mat = cor(wine[, (1:11)])
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
# Principle Components Analysis
z = wine[, (1:11)]
pc1 = prcomp(z, scale. = TRUE)
# summary(pc1)
# plot(pc1)
loadings = pc1$rotation
scores = pc1$x
# This looks really good
qplot(scores[,1], scores[,2], color = color, data = wine) + # facets = ~ quality,
labs(title = "Plot of Wine Principle Components",
x = "Component 1",
y = "Component 2",
caption = "Figure 4: Scatterplot of the first and second order principle components
of the 11 different features of wine.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# Only use 11 chemical properties and appropriate center and scale
x = wine[, (1:11)]
x = scale(x, center = TRUE, scale = TRUE)
mu = attr(x, "scaled:center")
sigma = attr(x, "scaled:scale")
# Choosing k with an elbow plot
k_grid = seq(2, 20, by = 1)
# SSE_grid = foreach(k = k_grid, .combine = 'c') %do% {
#   cluster_k = kmeans(x, k, nstart = 25)
#  cluster_k$tot.withinss
# }
# qplot(k_grid, SSE_grid)
# Choosing k with CH index
#n = nrow(x)
#CH_grid = foreach(k = k_grid, .combine = 'c') %do% {
#  cluster_k = kmeans(x, k, nstart = 25)
#  w = cluster_k$tot.withinss
#  b = cluster_k$betweenss
#  CH = (b / w) * ((n - k) / (k - 1))
#  CH
#}
#qplot(k_grid, CH_grid) +
#  labs(title = "Plot of CH Index",
#       x = "K",
#       y = "CH",
#       caption = "Figure 5: Plot of the CH Index for values of k from 2 to 20.") +
#  theme(plot.title = element_text(hjust = 0.5),
#        plot.caption = element_text(size = 10, hjust = 0.5))
# Choosing k with gap statistic
# wine_gap = clusGap(x, FUN = kmeans, nstart = 25, K.max = 10, B = 100)
# wine_gap
# plot(wine_gap)
# Use k = 2
cluster_1 = kmeanspp(x, 2, nstart = 25)
# cluster_1$center
# Some plots
# qplot(citric.acid, chlorides, data = wine, color = color, facets = ~ factor(cluster_1$cluster))
# qplot(citric.acid, chlorides, data = wine, color = color, facets = ~ factor(cluster_2$cluster))
# qplot(density, pH, data = wine, color = color, facets = ~ factor(cluster_1$cluster))
# qplot(density, pH, data = wine, color = color, facets = ~ factor(cluster_2$cluster))
# PCA to visualize the two clusters
cluster_1_plot = fviz_cluster(cluster_1, data = x, geom = c("point"))
cluster_1_plot +
labs(title = "Plot of Clusters following PCA",
x = "Component 1 (27.5%)",
y = "Component 2 (22.7%)",
caption = "Figure 6: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# The two clusters do pretty well in discriminating between the two wine colors
cluster_1_plot + facet_wrap(wine$color) +
labs(title = "Plot of Clusters following PCA by Color",
x = "Component 1 (27.5%)",
y = "Component 2 (22.7%)",
caption = "Figure 7: Clusters obtained from k-means++ and then summarized
using PCA faceted by color. The percentages in parentheses represent the
variation of the data captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# The two clusters aren't so good at discriminating between the wine qualities,
# but can see a rough split between high and low quality wine
cluster_1_plot + facet_wrap(wine$quality) +
labs(title = "Plot of Clusters following PCA by Quality",
x = "Component 1 (27.5%)",
y = "Component 2 (22.7%)",
caption = "Figure 8: Clusters obtained from k-means++ and then summarized
using PCA faceted by quality. The percentages in parentheses represent the
variation of the data captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
cluster_1$center
set.seed(3)
sm = read.csv("social_marketing.csv")
summary(sm)
# Cleaning the data
sm = filter(sm, spam == 0 & adult <= 5)
sm = select(sm, -c(X, chatter, uncategorized, spam, adult))
# First let's look at the correlations in the data set
# Obvious correlations that stick out are:
# college uni and sports playing/online games
# fashion and beauty
# personal fitness and health nutrition
corr_mat = cor(sm)
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
# First let's look at the correlations in the data set
# Obvious correlations that stick out are:
# college uni and sports playing/online games
# fashion and beauty
# personal fitness and health nutrition
corr_mat = cor(sm)
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
# First let's look at the correlations in the data set
# Obvious correlations that stick out are:
# college uni and sports playing/online games
# fashion and beauty
# personal fitness and health nutrition
corr_mat = cor(sm)
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
# First let's look at the correlations in the data set
# Obvious correlations that stick out are:
# college uni and sports playing/online games
# fashion and beauty
# personal fitness and health nutrition
corr_mat = cor(sm)
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
# First let's look at the correlations in the data set
# Obvious correlations that stick out are:
# college uni and sports playing/online games
# fashion and beauty
# personal fitness and health nutrition
corr_mat = cor(sm)
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
# First let's look at the correlations in the data set
# Obvious correlations that stick out are:
# college uni and sports playing/online games
# fashion and beauty
# personal fitness and health nutrition
corr_mat = cor(sm)
corrplot(corr_mat, type = "lower", method = "shade", tl.col = "black", tl.srt = 30)
c1 = kmeanspp(x, 3, nstart = 25)
c1_plot = fviz_cluster(c1, data = x, ellipse.type = "euclid",
geom = c("point"))
c1_plot +
labs(title = "Plot of Clusters following PCA",
caption = "Figure 10: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# Try to find clusters out of this
x = sm
x = scale(x, center = TRUE, scale = TRUE)
mu = attr(x, "scaled:center")
sigma = attr(x, "scaled:scale")
set.seed(3)
c1 = kmeanspp(x, 3, nstart = 25)
c1_plot = fviz_cluster(c1, data = x, ellipse.type = "euclid",
geom = c("point"))
c1_plot +
labs(title = "Plot of Clusters following PCA",
caption = "Figure 10: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
c1_plot = fviz_cluster(c1, data = x, ellipse.type = "convex",
geom = c("point"))
c1_plot +
labs(title = "Plot of Clusters following PCA",
caption = "Figure 10: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
c1_plot = fviz_cluster(c1, data = x, ellipse.type = "t",
geom = c("point"))
c1_plot +
labs(title = "Plot of Clusters following PCA",
caption = "Figure 10: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
c1_plot = fviz_cluster(c1, data = x, ellipse.type = "norm",
geom = c("point"))
c1_plot +
labs(title = "Plot of Clusters following PCA",
caption = "Figure 10: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
c1_plot = fviz_cluster(c1, data = x, ellipse.type = "confidence",
geom = c("point"))
c1_plot +
labs(title = "Plot of Clusters following PCA",
caption = "Figure 10: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
c2 = kmeanspp(x, 7, nstart = 25)
c2_plot = fviz_cluster(c2, data = x, ellipse.type = "confidence",
geom = c("point"))
c2_plot +
labs(title = "Plot of Clusters following PCA",
caption = "Figure 11: Clusters obtained from k-means++ and then summarized
using PCA. The percentages in parentheses represent the variation of the data
captured by that principle component.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
c_info = t(as.data.frame(c2$centers))
result = as.data.frame(cbind(rownames(c_info), apply(c_info, 1, which.max)))
rownames(result) = c()
colnames(result) = c("interest", "k")
result[result$k == 1,]
result[result$k == 2,]
result[result$k == 3,]
result[result$k == 4,]
result[result$k == 5,]
result[result$k == 6,]
result[result$k == 7,]
blah = result[result$k == 1,]
View(blah)
blahresult$interest[result$k == 1,]
blah = result$interest[result$k == 1,]
blah = result$interest[result$k == 1,]
blah = result$interest[result$k == 1]
blah
source('C:/Users/Colli/OneDrive/Documents/College Files/Sophomore Year/SDS 323 - Statistical Learning and Inference/SDS-323-Spring-2020/Exercise 3/social_marketing.r')
result[result$k == 1,]
result[result$k == 2,]
result[result$k == 3,]
result[result$k == 4,]
result[result$k == 5,]
result[result$k == 6,]
result[result$k == 7,]
result[result$k == 1,]
result[result$k == 2,]
result[result$k == 3,]
result[result$k == 4,]
result[result$k == 5,]
result[result$k == 6,]
result[result$k == 7,]
c_info = t(as.data.frame(c2$centers))
result = as.data.frame(cbind(rownames(c_info), apply(c_info, 1, which.max)))
rownames(result) = c()
colnames(result) = c("interest", "k")
result[result$k == 1,]
result[result$k == 2,]
result[result$k == 3,]
result[result$k == 4,]
result[result$k == 5,]
result[result$k == 6,]
result[result$k == 7,]
c_info = t(as.data.frame(c2$centers))
result = as.data.frame(cbind(rownames(c_info), apply(c_info, 1, which.max)))
rownames(result) = c()
colnames(result) = c("interest", "k")
result[result$k == 1,]
c2$centers
result[result$k == 2,]
result[result$k == 3,]
result[result$k == 5,]
result[result$k == 6,]
result[result$k == 7,]
result[result$k == 7,]
c2$centers
source('C:/Users/Colli/OneDrive/Documents/College Files/Sophomore Year/SDS 323 - Statistical Learning and Inference/SDS-323-Spring-2020/Exercise 3/social_marketing.r')
# Now run a lasso regression over all the effects
x_gb = sparse.model.matrix(~ green_rating + age + renovated + class_a +
+ net + cluster + class_b + amenities + size +
empl_gr + leasing_rate + stories + amenities +
total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + cluster_rent + cluster:age +
cluster:renovated + cluster:class_a + cluster:net,
data = gb)[, -1]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mosaic)
library(foreach)
library(gamlr)
library(LICORS)
library(cluster)
library(corrplot)
library(factoextra)
library(gridExtra)
set.seed(7)
gb = read.csv("greenbuildings.csv")
summary(gb)
# Remove extraneous and redundant varaibles, as well as NA entries
gb = select(gb, - c(CS_PropertyID, LEED, Energystar, cd_total_07, hd_total07))
gb = na.omit(gb)
# Treat cluster like a factor though they are numbered
gb$cluster = as.factor(gb$cluster)
# Rent is positively skewed, so we should regress on the log of it
qplot(log(Rent), data = gb) +
labs(title = "Plot of log(Rent)",
caption = "Figure 1: Histogram of the rent of 7,894 commercial rental properties
on the log scale to normalize the otherwise positively skewed data.") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# Incredibly basic model and results
lm = lm(log(Rent) ~ green_rating, data = gb)
# coef(lm)
# Now to choose other main effects
# Lots of cluster level differences in rent
clust_samples = sample(levels(gb$cluster), 10)
p1 = ggplot(filter(gb, cluster %in% clust_samples)) +
geom_boxplot(mapping = aes(x = cluster, y = log(Rent))) +
labs(title = "Plot of Clusters on log(Rent)",
x = "Cluster",
caption = "Figure 2: Above is a grouped boxplot showing cluster level
differences in rent of 10 different clusters sampled from the data. A
cluster consists of a green building and other buildings surrounding it
within a quarter-mile radius. Below are 4 other plots showing the effects
of other features on rent. For the categorical features, 0 = No 1 = Yes.") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5),
axis.text.y = element_text(size = 4))
p1
# age and rent
p2 = qplot(age, log(Rent), data = gb, geom = "point") +
labs(title = "Plot of Age on log(Rent)",
x = "Age") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# renovated and rent
p3 = qplot(factor(renovated), log(Rent), data = gb, geom = "boxplot") +
labs(title = "Renovation Status on log(Rent)",
x = "Renovation Status") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# class_a and rent
p4 = qplot(factor(class_a), log(Rent), data = gb, geom = "boxplot") +
labs(title = "Class A Status on log(Rent)",
x = "Class A Status") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
# net and rent
p5 = qplot(factor(net), log(Rent), data = gb, geom = "boxplot") +
labs(title = "Included Utilities on log(Rent)",
x = "Included Utilities") +
theme(plot.title = element_text(hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 0.5))
grid.arrange(p2, p3, p4, p5, ncol = 2)
# Now run a lasso regression over all the effects
x_gb = sparse.model.matrix(~ green_rating + age + renovated + class_a +
+ net + cluster + class_b + amenities + size +
empl_gr + leasing_rate + stories + amenities +
total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + cluster_rent + cluster:age +
cluster:renovated + cluster:class_a + cluster:net,
data = gb)[, -1]
y_gb = log(gb$Rent)
set.seed(4)
lasso1 = cv.gamlr(x_gb, y_gb, free = 1:5)
# plot(lasso1)
# Coefficients of main effects
head(coef(lasso1))
# Number of coefficients in the model that are nonzero
# colSums(coef(lasso1) == 0)
# Now run a lasso regression over all the effects
x_gb = sparse.model.matrix(~ green_rating + age + renovated + class_a +
+ net + cluster + class_b + amenities + size +
empl_gr + leasing_rate + stories + amenities +
total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + cluster_rent + cluster:age +
cluster:renovated + cluster:class_a + cluster:net,
data = gb)[, -1]
y_gb = log(gb$Rent)
set.seed(3)
lasso1 = cv.gamlr(x_gb, y_gb, free = 1:5)
# plot(lasso1)
# Coefficients of main effects
head(coef(lasso1))
# Number of coefficients in the model that are nonzero
# colSums(coef(lasso1) == 0)
# Now run a lasso regression over all the effects
x_gb = sparse.model.matrix(~ green_rating + age + renovated + class_a +
+ net + cluster + class_b + amenities + size +
empl_gr + leasing_rate + stories + amenities +
total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + cluster_rent + cluster:age +
cluster:renovated + cluster:class_a + cluster:net,
data = gb)[, -1]
y_gb = log(gb$Rent)
set.seed(7)
lasso1 = cv.gamlr(x_gb, y_gb, free = 1:5)
# plot(lasso1)
# Coefficients of main effects
head(coef(lasso1))
# Number of coefficients in the model that are nonzero
# colSums(coef(lasso1) == 0)
# Now run a lasso regression over all the effects
x_gb = sparse.model.matrix(~ green_rating + age + renovated + class_a +
+ net + cluster + class_b + amenities + size +
empl_gr + leasing_rate + stories + amenities +
total_dd_07 + Precipitation + Gas_Costs +
Electricity_Costs + cluster_rent + cluster:age +
cluster:renovated + cluster:class_a + cluster:net,
data = gb)[, -1]
y_gb = log(gb$Rent)
set.seed(7)
lasso1 = cv.gamlr(x_gb, y_gb, free = 1:5)
# plot(lasso1)
# Coefficients of main effects
head(coef(lasso1))
# Number of coefficients in the model that are nonzero
colSums(coef(lasso1) == 0)
View(lasso1)
